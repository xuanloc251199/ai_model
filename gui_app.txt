# gui_app.py

import io
import threading
import logging
import traceback
from tkinter import (
    Tk, Frame, Label, Button, Radiobutton,
    StringVar, filedialog, messagebox
)
from PIL import Image, ImageTk
import requests
from api_client import generate_baby_url

# Logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s')

# Imgur Client ID
IMGUR_CLIENT_ID = '242eaaf156d749e'

def upload_to_imgur(path: str) -> str:
    """
    Resize ảnh tối đa 1024×1024, convert sang RGB nếu cần, rồi upload lên Imgur.
    Trả về URL public.
    """
    logging.debug(f"Preparing to upload '{path}' to Imgur")
    img = Image.open(path)
    img.thumbnail((1024, 1024), Image.LANCZOS)

    # Nếu ảnh có kênh alpha, convert về RGB để save JPEG
    if img.mode in ("RGBA", "LA") or (img.mode == "P" and "transparency" in img.info):
        img = img.convert("RGB")

    buf = io.BytesIO()
    img.save(buf, format='JPEG', quality=85)
    buf.seek(0)

    files = {'image': buf}
    headers = {'Authorization': f'Client-ID {IMGUR_CLIENT_ID}'}
    resp = requests.post('https://api.imgur.com/3/image', headers=headers, files=files)
    logging.debug(f"Imgur response: {resp.status_code} {resp.text}")
    resp.raise_for_status()

    link = resp.json()['data']['link']
    logging.debug(f"Imgur link: {link}")
    return link


def show_result_window(img_bytes: bytes):
    win = Tk()
    win.title('Generated Baby')
    img = Image.open(io.BytesIO(img_bytes)).resize((400, 400), Image.LANCZOS)
    photo = ImageTk.PhotoImage(img)
    lbl = Label(win, image=photo)
    lbl.image = photo
    lbl.pack(padx=10, pady=10)
    win.mainloop()

def create_gui():
    root = Tk()
    root.title('Baby Face Generator')
    root.geometry('600x700')
    root.resizable(False, False)

    father_path = StringVar()
    mother_path = StringVar()
    gender      = StringVar(value='random')

    # Parent upload & preview
    pf = Frame(root); pf.pack(pady=20)
    fb = Frame(pf); fb.pack(side='left', padx=30)
    Label(fb, text='Father').pack()
    father_preview = Label(fb, text='Click to upload',
                           width=20, height=10, bg='#eee')
    father_preview.pack()
    father_preview.bind(
        "<Button-1>",
        lambda e: select_image(father_path, father_preview)
    )

    mb = Frame(pf); mb.pack(side='left', padx=30)
    Label(mb, text='Mother').pack()
    mother_preview = Label(mb, text='Click to upload',
                           width=20, height=10, bg='#eee')
    mother_preview.pack()
    mother_preview.bind(
        "<Button-1>",
        lambda e: select_image(mother_path, mother_preview)
    )

    # Gender radio
    Label(root, text='Baby gender', font=('Arial', 12, 'bold')).pack(pady=(20,5))
    gf = Frame(root); gf.pack()
    for txt, val in [('Boy','babyBoy'), ('Girl','babyGirl')]:
        rb = Radiobutton(
            gf, text=txt, variable=gender, value=val,
            indicatoron=0, width=10, padx=5, pady=5
        )
        rb.pack(side='left', padx=5)
        if val == 'random':
            rb.select()

    # Generate button
    Button(
        root, text='Generate Baby',
        font=('Arial', 14),
        bg='#3366FF', fg='white',
        width=30, height=2,
        command=lambda: threading.Thread(target=generate).start()
    ).pack(pady=30)

    def select_image(var: StringVar, preview: Label):
        path = filedialog.askopenfilename(
            filetypes=[('Image Files','*.png;*.jpg;*.jpeg')]
        )
        if not path:
            return
        var.set(path)
        img = Image.open(path)
        img.thumbnail((preview.winfo_width(), preview.winfo_height()), Image.LANCZOS)
        ph = ImageTk.PhotoImage(img)
        preview.config(image=ph, text='')
        preview.image = ph

    def generate():
        try:
            if not father_path.get() or not mother_path.get():
                return messagebox.showerror('Error', 'Please select both parent images.')

            # Resize & upload to Imgur
            f_url = upload_to_imgur(father_path.get())
            m_url = upload_to_imgur(mother_path.get())
            logging.debug(f"Imgur URLs: {f_url}, {m_url}")

            # Call Baby Generator
            baby_bytes = generate_baby_url(f_url, m_url, gender.get())
            show_result_window(baby_bytes)

        except requests.exceptions.HTTPError as e:
            code, txt = e.response.status_code, e.response.text
            messagebox.showerror('HTTP Error', f"Status: {code}\n{txt}")
        except Exception as e:
            logging.error("Error in generate(): %s", e)
            traceback.print_exc()
            messagebox.showerror('Error', str(e))

    root.mainloop()

if __name__=='__main__':
    create_gui()
